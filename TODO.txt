Main objectives:

It is actually such a shame that most people in the osu! community think that the best beatmaps in the game are unplayable trash,
especially because they are 100% correct. This AI was actually created so that I could see what a solid run on the nihil 
Lil Darkie AMV (high sv) map would look like, because I doubt any osu! player will ever be able to, or want to, do something like that any time soon. 

I now plan on extending the scope of this software by quite a bit, just to see how far I can actually take it.
I no longer want this app to be compatible with osu! - 
sure it will be able to load in 90% of osu! beatmaps, but I will be adding a lot more gamplay elements, possibly even 
a singleplayer mode with a storyline, and a lot of other things that won't 100% line up with the original osu! game.
The core gameplay will also need to change, if we want to expose those cool slider maps to newer players. 
Not everyone has the time to play osu for 1-2 hours every day and grind till they can play them the normal way, while getting carpral tunnel in the process.

TODO:

- Improve the underlying odin framework
    - Use render+update in seperate thread feature
- Refactor the codebase
    - What I've noticed after coming back to this one year later, is that the code for most methods can be much better
- Start making a playable osu! clone
    - Want to make the playfield and menus look nice
    - Want to add a second kind of slider that needs to be dragged manually 
    - The game needs to allow for creating as well as easily playing the more 'goated' osu! slider maps, and 2B maps
- Improve the natural-looking AI
    - Sliders are hard. the AI shouldn't be so good at them
    - The AI should be able to play 2B maps
    - The AI shouldn't be able to see (or at least pretend to not see) objects that aren't visible on the screen yet. 
- Start making a bespoke osu! editor. Going to take a UX > UI
    - Our more natural looking AI can be incorporated here
        - Should start doing keypresses
        - Seek bar, it will have a line graph showing acceleration/difficulty spikes based on accel most likely
    - Rotate/scale with same shortcuts
    - SV pallete, ability to scale sliders proportionally to sv, ability to change beat length without changing slider visual
    - Repeats?
    - Hitsounding should be like a DAW
    - Possibly a custom beatmap format. We want to support more features. It'll just be some JSON thing, so I can work with it
        in a proper code editor
